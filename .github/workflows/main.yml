# v0.0.1
name: Demo XAPI CI
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'build/**'
      - 'README.md'
      - 'LICENSE'
    branches:
      [master, dev]
  pull_request:
    branches:
      [master, dev]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'build/**'
      - 'README.md'
      - 'LICENSE'

jobs:
  CI:
    runs-on: ubuntu-latest

    env: 
      SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      BLOB_SAS: ${{ secrets.BLOB_TOKEN }}
      VERSION_SUFFIX: ""
      ARTIFACT_URL: ""

    steps:

    - name: Set git to use CRLF
      run: |
        git config --global core.autocrlf true

    - uses: actions/checkout@v2    
      with:
        fetch-depth: 0

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    
    - name: Install dependencies
      run: |
        npm install

    - name: Report linting start
      id: linting-start
      uses: LouisBrunner/checks-action@v1.1.2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: "Linting"
        status: "in_progress"

    - name: Run linting
      id: linting
      continue-on-error: true
      run: |
        npm run lint

    - name: Report linting completed
      uses: LouisBrunner/checks-action@v1.1.2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        check_id: ${{ steps.linting-start.outputs.check_id }}
        status: "completed"
        conclusion: ${{ steps.linting.outcome }}

    - name: Report unit tests start
      id: unit-tests-start
      uses: LouisBrunner/checks-action@v1.1.2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: "Unit tests"
        status: "in_progress"

    - name: Run unit tests
      id: unit-tests
      run: |
        npm run test -- --no-progress --no-watch --code-coverage --configuration=ci

    - name: Report unit tests completed
      uses: LouisBrunner/checks-action@v1.1.2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        check_id: ${{ steps.unit-tests-start.outputs.check_id }}
        status: "completed"
        conclusion: ${{ steps.unit-tests.outcome }}

    - name: Get Image Version
      uses: VirtoCommerce/vc-github-actions/get-image-version@master
      id: image
      with:
        projectType: theme

    - name: Set release variables
      if: ${{ github.ref == 'refs/heads/master' }}
      run: |
        echo "VERSION_SUFFIX=${{ steps.image.outputs.prefix }}" >> $GITHUB_ENV

    - name: Set release-alpha variables
      if: ${{ github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/dev' }}
      run: |
        echo "VERSION_SUFFIX=${{ steps.image.outputs.fullVersion }}" >> $GITHUB_ENV

    - name: Set PR variables
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        echo "VERSION_SUFFIX=${{ steps.image.outputs.taggedVersion }}" >> $GITHUB_ENV

    - name: Set ARTIFACT_URL
      run: |
        echo "ARTIFACT_URL=ghcr.io/virtocommerce/demo-xapi-app:${{ env.VERSION_SUFFIX }}" >> $GITHUB_ENV

    - name: Add link to PR
      if: ${{ github.event_name == 'pull_request' }}
      uses: VirtoCommerce/vc-github-actions/publish-artifact-link@master
      with:
        artifactUrl: '${{ env.ARTIFACT_URL }}'

    - name: Setup SonarQube
      uses: warchant/setup-sonar-scanner@v3

    - name: SonarCloud Scan
      uses: VirtoCommerce/vc-github-actions/sonar-theme@master
      with:
        projectVersion: ${{ env.VERSION_SUFFIX }}

    - name: Report build start
      id: build-start
      uses: LouisBrunner/checks-action@v1.1.2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: "Build"
        status: "in_progress"

    - name: Build
      id: build
      run: |
        npm run build

    - name: Report build completed
      uses: LouisBrunner/checks-action@v1.1.2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        check_id: ${{ steps.build-start.outputs.check_id }}
        status: "completed"
        conclusion: ${{ steps.build.outcome }}

    - name: Docker Login
      uses: azure/docker-login@v1
      with:
        login-server: ghcr.io
        username: $GITHUB_ACTOR
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Publish Docker Image
      run: |
          docker build ${{ github.workspace }} --tag ${{ env.ARTIFACT_URL }}
          docker push ${{ env.ARTIFACT_URL }}

    - name: CI results
      run: |
          echo "Project $GITHUB_REPOSITORY successfully build and published to $ARTIFACT_URL"

    - name: Invoke VC deployment workflow
      if: ${{ github.ref == 'refs/heads/dev' || (github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/master')}}
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: VC deployment
        token: ${{ secrets.REPO_TOKEN }}
        inputs: '{ "artifactUrl": "${{ env.ARTIFACT_URL }}" }'
